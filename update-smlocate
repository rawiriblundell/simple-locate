#!/bin/sh
# shellcheck disable=SC2006
# Purpose:   Build file lists for use by simple-locate
# Author:    Rawiri Blundell
# Copyright: MIT licence
# Date:      20160503

# Style note: This uses awful backticks for SVR4 compatibility

# Select a destination directory
destDir=/var/lib/simple-locate

# Filesystem types to ignore.  Built up from Linux and Solaris so far...
# Try to keep it alphabetical if you add anything...
if [ "`uname`" = FreeBSD ]; then
  exclFS="nfs"
else
  exclFS="afs autofs coda ctfs dev devfs devpts fd ftpfs hsfs iso9660 lofs mfs mntfs namefs ncpfs nfs NFS objfs pcfs proc shfs smbfs sysfs tmpfs uvfs"
fi

# We convert this to a find friendly list too
pruneFS=
for fs in ${exclFS}; do
  pruneFS="${pruneFS} -o -fstype ${fs}"
done
# Now we chop off the unwanted "-o" at the start of the variable
pruneFS=`echo "${pruneFS}" | cut -d " " -f3-`

# Directories to ignore.  Built up from Linux and Solaris so far...
# Try to keep it alphabetical if you add anything...
# Note: Do NOT add trailing slashes
exclPaths="/afs /amd /cdrom /media /proc /sfs /tmp /usr/tmp /var/tmp"

# Now we convert this to a list we can use in find.
# We basically want to convert "/afs /amd ..." 
# to "-o -fstype d -name /afs -o -fstype d -name /amd ..."

# There's very likely a non-portable, very elegant way to do this with 'sed' or 'awk'

# We start by blanking out a new variable
prunePaths=

# Then for each item in the exclPaths list, we build up the new variable
for path in ${exclPaths}; do
  prunePaths="${prunePaths} -o -type d -name ${path}"
done

# If you want to add certain paths to the index, add them here in a space separated list
# Again, do NOT add trailing slashes
inclPaths="/"

# Figure out our tmp directory.  We want any existing index files to be available 
# during generation of the new ones.  So we build into tmp then move into place
if [ -d /tmp ]; then
  tmpDir=/tmp
elif [ -d /var/tmp ]; then
  tmpDir=/var/tmp
elif [ -d /usr/tmp ]; then
  tmpDir=/usr/tmp
fi

# This one can't be blank
if [ -z "${tmpDir}" ]; then
  printf "%s\n" "[ERROR] - smlocate: Unable to determine the tmp directory on this system."
  exit 1
fi

# Ensure the destination directory exists
if [ ! -d "${destDir}" ]; then
  # If we can't create it, set destDir to tmpDir
  if ! mkdir -p "${destDir}" 2>/dev/null; then
    destDir="${tmpDir}"
    # TO-DO: ensure correct permissions/ownership?
  fi
fi

# If we're running as root, we can generate both files
if [ -w / ]; then
  # Create our root-readable file
  # shellcheck disable=SC2086
  find ${inclPaths} \( ${pruneFS}${prunePaths} \) -prune -o -print 2>/dev/null > "${tmpDir}"/locate.root

  # Ensure correct ownership and permissions
  chown 0:0 "${tmpDir}"/locate.root
  chmod 440 "${tmpDir}"/locate.root

  # Create our user-readable file. This should remove most files that aren't 
  # accessible to users, without needing to stat/test every file
  # We need to figure out if 'su' requires '-s'.  This issue was found on, surprise: Solaris
  # First we test if "true" returns 0, if so we can go ahead with this style
  if su nobody -c "true" > /dev/null 2>&1; then
    su nobody -c "find ${inclPaths} \\( ${pruneFS}${prunePaths} \\) -prune -o -print 2>/dev/null > ${tmpDir}/locate.user"
  # Next, we try '-s', we use '-s' to override /bin/false or /bin/nologin
  elif su nobody -s /bin/sh -c "true" > /dev/null 2>&1; then
    su nobody -s /bin/sh -c "find ${inclPaths} \\( ${pruneFS}${prunePaths} \\) -prune -o -print 2>/dev/null > ${tmpDir}/locate.user"
  # Put in handling for FreeBSD
  elif [ "`uname`" = FreeBSD ]; then
    su -m nobody -c "find ${inclPaths} \\( ${pruneFS}${prunePaths} \\) -prune -o -print" > ${tmpDir}/locate.user 2>/dev/null
  # If nothing works, print a notification, then fail back to nothing and hope for the best
  else
    printf "%s\n" "[INFO] - smlocate: Unable to determine if 'su' on this host requires '-s /bin/sh'" \
      "Proceeding on the assumption that it does not.  YMMV."
    su nobody -c "find ${inclPaths} \\( ${pruneFS}${prunePaths} \\) -prune -o -print 2>/dev/null > ${tmpDir}/locate.user"
  fi

  # Ensure correct ownership and permissions
  chmod 444 "${tmpDir}"/locate.user

# Otherwise, we just generate what we can (i.e. manual run)
else
  # This will list files limited to the invocating user
  printf "%s\n" "[INFO] - smlocate: building index now, this may take a while..."
  # shellcheck disable=SC2086
  find ${inclPaths} \( ${pruneFS}${prunePaths} \) -prune -o -print 2>/dev/null > ${tmpDir}/locate.user

  # Ensure correct ownership and permissions
  chmod 444 "${tmpDir}"/locate.user
fi

# If tmpDir and destDir are different, move the tmp files to the destination
if [ ! "${tmpDir}" = "${destDir}" ]; then
  mv "${tmpDir}"/locate.root "${destDir}"
  mv "${tmpDir}"/locate.user "${destDir}"
fi
