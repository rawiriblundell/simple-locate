#!/bin/sh
# shellcheck disable=SC2006
# Purpose:   Build file lists for use by simple-locate
# Style note: This uses awful backticks for SVR4 compatibility

############################################################
#The MIT License (MIT).
#Copyright (c) 2016 Rawiri Blundell.  

#Permission is hereby granted, free of charge, to any person obtaining
#a copy of this software and associated documentation files (the "Software"), 
#to deal in the Software without restriction, including without limitation 
#the rights to use, copy, modify, merge, publish, distribute, sublicense, 
#and/or sell copies of the Software, and to permit persons to whom the 
#Software is furnished to do so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included 
#in all copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
#OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
#DEALINGS IN THE SOFTWARE.
############################################################

########################################
# If you want to add certain paths to the index, add them here in a space separated list
# Do NOT add trailing slashes e.g. '/opt' = good, '/opt/' = bad
inclPaths="/"

########################################
# Figure out our tmp directory.  We want any existing index files to be available 
# during generation of the new ones.  So we build into tmp then move into place
if [ -d /tmp ]; then
  tmpDir=/tmp
elif [ -d /var/tmp ]; then
  tmpDir=/var/tmp
elif [ -d /usr/tmp ]; then
  tmpDir=/usr/tmp
# We can't allow this variable to be blank
else
  printf "%s\n" "[ERROR] - smlocate: Unable to determine the tmp directory on this system."
  exit 1
fi

# Now we need to set aside our own place to work
tmpDir="${tmpDir}/smlocate"

# Ensure the tmp directory exists
if [ ! -d "${tmpDir}" ]; then
  # If we can't create it, fail out
  if ! mkdir -p "${tmpDir}" 2>/dev/null; then
    printf "%s\n" "[ERROR] - smlocate: Unable to create '${tmpDir}', so unable to continue."
    exit 1
  fi
  chmod 777 "${tmpDir}"
fi

########################################
# Cleanup function and traps
cleanup() {
  find "${tmpDir}" -type f -name "locate.*" -exec rm -f {} \; 2>/dev/null
} 

# We want to trap on everything
trap cleanup HUP INT QUIT TERM EXIT

########################################
# Select a destination directory
destDir=/var/lib/simple-locate

# Ensure the destination directory exists
if [ ! -d "${destDir}" ]; then
  # If we can't create it, set destDir to tmpDir
  if ! mkdir -p "${destDir}" 2>/dev/null; then
    destDir="${tmpDir}"
    # TO-DO: Add notification?
  fi
  chmod 777 "${destDir}"
fi

########################################
# Filesystem types to ignore.  Built up from Linux and Solaris so far...
# Try to keep it alphabetical if you add anything...
exclFS="afs autofs coda ctfs dev devfs devpts fd ftpfs hsfs iso9660 lofs mfs mntfs namefs ncpfs nfs NFS objfs pcfs proc shfs smbfs sysfs tmpfs uvfs"

# We convert this to a 'find' friendly list
# We start by blanking out a new variable
pruneFS=
# Then for each item in the exclFS list, we build up the new variable
for fs in ${exclFS}; do
  pruneFS="${pruneFS} -o -fstype ${fs}"
done
# Now we chop off the unwanted '-o' at the start of the variable
pruneFS=`echo "${pruneFS}" | cut -d " " -f3-`

########################################
# Directory names to ignore.  Built up from Linux and Solaris so far...
# Try to keep it alphabetical if you add anything...
# Note: Slashes will be removed, so don't try to specify e.g. 
# '/tmp /usr/tmp /var/tmp'
# '/tmp' or 'tmp' will work for all three cases
# Slashes will be removed later on as well, so '/var/tmp' would become 'vartmp' which won't match anything
exclPaths="/afs /amd /cdrom /media /proc /sfs /tmp"

# We make an egrep filter for merging
mergeExclPaths=`echo "${exclPaths}" | tr -d " " | sed 's/\//|\^\//g' | cut -d "|" -f2-`

# And we remove any slashes from exclPaths for portable find usage
exclPaths=`echo "${exclPaths}" | tr -d "/"`

# Now we convert this to a list we can use in find.
# We basically want to convert "/afs /amd ..." 
# to "-o -type d -name afs -o -type d -name amd ..."

# There's very likely a non-portable, very elegant way to do this with 'sed' or 'awk'
prunePaths=
for path in ${exclPaths}; do
  prunePaths="${prunePaths} -o -type d -name ${path}"
done

########################################
# Figure out how we are going to run commands as 'nobody'
# This is obviously a test for the root user.
if [ -w / ]; then
  suMethod=

  # First we test if "true" returns 0, if so we can go ahead with this style
  # This is theoretically the most portable option
  if su nobody -c "true" > /dev/null 2>&1; then
    suMethod="su nobody -c"
  # Next, we try '-s', we use '-s' to override /bin/false or /bin/nologin i.e. (some) Solaris
  elif su nobody -s /bin/sh -c "true" > /dev/null 2>&1; then
    suMethod="su nobody -s /bin/sh -c"
  # Next we try to cater for '-m' i.e. FreeBSD
  elif su -m nobody -c "true" > /dev/null 2>&1; then
    suMethod="su -m nobody -c"
  # Otherwise, we fail out
  else
    printf "%s\n" "[ERROR] - smlocate: Could not determine appropriate method to 'su' to user 'nobody'" \
      "Unable to continue."
    exit 1
  fi
fi

########################################
# Declare our 'find' commands
fullFind() {
  if [ -z "$1" ]; then
    searchPaths="${inclPaths}"
  else
    searchPaths="$1"
  fi
  # shellcheck disable=SC2086
  find ${searchPaths} \( ${pruneFS}${prunePaths} \) -prune -o -print 2>/dev/null
}

suFind() {
  if [ -z "$1" ]; then
    searchPaths="${inclPaths}"
  else
    searchPaths="$1"
  fi
  # shellcheck disable=SC2086
  ${suMethod} "find ${searchPaths} \\( ${pruneFS}${prunePaths} \\) -prune -o -print"
}

########################################
# If we're not root, assign our username to a variable
if [ ! -w / ]; then
  myUserName=`whoami`
fi

########################################
# Determine whether or not to use merging format
# If 'false', the indexes will be completely rebuilt each time this update script is run
# If 'true', only directories changed in the last 24 hours will be reindexed
# For most basic usage, 'false' is safer.
mergeIndex=true

################################################################################
# No more editing should be necessary below this line
################################################################################

# If merging is enabled, we need to generate a list of directories
# This builds an egrep filter that we apply to any existing index files
if [ "${mergeIndex}" = true ]; then
 
  # Find all directories modified in the last 24 hours and generate a list file
  # shellcheck disable=SC2086
  find ${inclPaths} \( ${pruneFS}${prunePaths} \) -prune -o -type d -mtime -1 -print 2>/dev/null \
    | egrep -v "${mergeExclPaths}" | sed 's/^/\^/' > "${tmpDir}"/locate.merge
  
  # If the root index file exists and is writeable by us (i.e. we're root)...
  if [ -w "${destDir}"/locate.root ]; then
    
    # We create copies of the files to work on, using the merge list file
    # as an input file for 'grep' to filter out the dirs to be reindexed
    grep -v -f "${tmpDir}"/locate.merge "${destDir}"/locate.root > "${tmpDir}"/locate.root
    grep -v -f "${tmpDir}"/locate.merge "${destDir}"/locate.user > "${tmpDir}"/locate.user
    
    # Now we need to remove the "^" from the start of each line in the merge file
    sed 's/^\^//' < "${tmpDir}"/locate.merge > "${tmpDir}"/locate.merge2
    mv "${tmpDir}"/locate.merge2 "${tmpDir}"/locate.merge
    
    # shellcheck disable=SC2162
    while IFS= read dir; do
      # shellcheck disable=SC2086
      fullFind "${dir}" >> "${tmpDir}"/locate.root
      # shellcheck disable=SC2086
      suFind "${dir}" >> "${tmpDir}"/locate.user 2>/dev/null
    done < "${tmpDir}"/locate.merge
    
  # If, however, the root index file doesn't exist (and we're root), we create it
  elif [ ! -f "${destDir}"/locate.root ]; then
    if [ -w / ]; then
      fullFind > "${tmpDir}"/locate.root
    fi
       
  # And if the user index file doesn't exist (and we're root), we create it
  elif [ ! -f  "${destDir}"/locate.user ]; then
    if [ -w / ]; then
      suFind > "${tmpDir}"/locate.user 2>/dev/null
    fi
  # If a file exists for your particular account, process it.
  # Note: root invocations of this script will not update your individual index file
  elif [ -f "${destDir}"/locate."${myUserName}" ]; then
    # Obviously this find command will be limited to what you can access.
    # Defying DRY practices here just saves a lot of headaches
    grep -v -f "${tmpDir}"/locate.merge "${destDir}"/locate."${myUserName}" > "${tmpDir}"/locate."${myUserName}"
    sed 's/^\^//' < "${tmpDir}"/locate.merge > "${tmpDir}"/locate.merge2
    mv "${tmpDir}"/locate.merge2 "${tmpDir}"/locate.merge
    # shellcheck disable=SC2162
    while IFS= read dir; do
      # shellcheck disable=SC2086
      fullFind "${dir}" >> "${tmpDir}"/locate."${myUserName}"
    done < "${tmpDir}"/locate.merge
 
  # Obviously, if your index file doesn't exist, we should create it
  elif [ -n "${myUserName}" ]; then
    if [ ! -f "${destDir}"/locate."${myUserName}" ]; then  
      printf "%s\n" "[INFO] - smlocate: building index now, this may take a while..."
      fullFind "${inclPaths}" > "${tmpDir}"/locate."${myUserName}"
    fi
  fi

# Else, if merging is not enabled, we perform a full index.
# If we're running as root, we can generate both files
elif [ -w / ]; then
  # Create our root-readable files
  fullFind "${inclPaths}" > "${tmpDir}"/locate.root

  # Now create our user-readable file.  See comments above.
  suFind "${inclPaths}" > "${tmpDir}"/locate.user 2>/dev/null
  
# Otherwise, we just generate what we can (i.e. manual run)
# This will list files limited to the invocating user
else
  printf "%s\n" "[INFO] - smlocate: building index now, this may take a while..."
  fullFind "${inclPaths}" > "${tmpDir}"/locate."${myUserName}"
fi

# Ensure correct ownership and permissions
chown 0:0 "${tmpDir}"/locate.root 2>/dev/null
chmod 600 "${tmpDir}"/locate.root 2>/dev/null
chmod 444 "${tmpDir}"/locate.user 2>/dev/null
chown "${myUserName}" "${tmpDir}"/locate."${myUserName}" 2>/dev/null
chmod 600 "${tmpDir}"/locate."${myUserName}" 2>/dev/null

# If tmpDir and destDir are different, move the tmp files to the destination
if [ ! "${tmpDir}" = "${destDir}" ]; then
  mv "${tmpDir}"/locate.root "${destDir}" 2>/dev/null
  mv "${tmpDir}"/locate.user "${destDir}" 2>/dev/null
  mv "${tmpDir}"/locate."${myUserName}" "${destDir}" 2>/dev/null
fi
